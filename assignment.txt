 "#9.Given an array arr[] of integers and an integer K, the task is to find the greatest contiguous sub-array of size K.\n",
    "\n",
    "#Sub-array X is said to be greater than sub-array Y if the first non-matching element in both the sub-arrays has a \n",
    "#greater value in X than in Y.\n",
    "\n",
    "#For example : Input: arr[] = {1, 4, 3, 2, 5}, K = 4 Output: 4 3 2 5 Two subarrays are {1, 4, 3, 2} and {4, 3, 2, 5}. \n",
    "#First non-matching element from array1 and array 2 : 1 and 4 as 4 is greater Hence, the greater one is {4, 3, 2, 5}\n",
    "def greatest_sub_array(input_list,n):\n",
    "    index=len(input_list)-(n-1)\n",
    "    max_value=max(input_list[0:index])\n",
    "    index=input_list.index(max_value)\n",
    "    return input_list[index:index+n]\n",
    "   \n",
    "   \n",
    "print(greatest_sub_array([1, 4, 3, 2, 5],4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2, [1, 3, 5])\n"
     ]
    }
   ],
   "source": [
    "#10.Given a list of N integers. The task is to eliminate the minimum number of elements such that in the resulting list \n",
    "#the sum of any two adjacent values is even.\n",
    "\n",
    "#Numbers = [1, 3, 5, 4, 2] Output = [1, 3, 5] Total elements removed 2 Elements to be removed [4,2]\n",
    "\n",
    "#Function Name : adj_sum_even() Input : list Output : tuple(int,list)\n",
    "def adj_sum_even(num_list):\n",
    "    o_list=[]\n",
    "    e_list=[]\n",
    "    result=[]\n",
    "    for value in num_list:\n",
    "        if(value>0):\n",
    "            if(value%2==0):\n",
    "                e_list.append(value)\n",
    "            else:\n",
    "                o_list.append(value)\n",
    "    if(len(e_list)>len(o_list)):\n",
    "        result.append(len(o_list))\n",
    "        result.append(e_list)\n",
    "    else:\n",
    "        result.append(len(e_list))\n",
    "        result.append(o_list)\n",
    "    return tuple(result)\n",
    "   \n",
    "result=adj_sum_even([1, 3, 5, 4, 2])\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Concord': ['New Hampshire', 'Massachusetts'], 'Hanover': ['New Hampshire'], 'Boston': ['Massachusetts'], 'Springfield': ['Massachusetts', 'Illinois'], 'Chicago': ['Illinois'], 'Peoria': ['Illinois']}\n"
     ]
    }
   ],
   "source": [
    "#3.Given a dictionary that associates the names of states with a list of the names of cities that appear in it,\n",
    "#write a program that creates a new dictionary that associates the name of a city with the list of states that it appears in.\n",
    "\n",
    "#As an example, if the first dictionary is\n",
    "\n",
    "#Input : states = {'New Hampshire': ['Concord', 'Hanover'],\n",
    "\n",
    "#'Massachusetts': ['Boston', 'Concord', 'Springfield'],\n",
    "\n",
    "#'Illinois': ['Chicago', 'Springfield', 'Peoria'] }\n",
    "\n",
    "#Output:\n",
    "\n",
    "#cities = {'Hanover': ['New Hampshire'],\n",
    "\n",
    "#'Chicago': ['Illinois'],'Boston': ['Massachusetts'],\n",
    "\n",
    "#'Peoria': ['Illinois'],'Concord': ['New Hampshire','Massachusetts'],\n",
    "\n",
    "#'Springfield': ['Massachusetts', 'Illinois'] }\n",
    "\n",
    "#Function Name : city_with_states Input : dict Output : dict\n",
    "def city_with_states(input_dict):\n",
    "    city_list=[]\n",
    "    output_dict={}\n",
    "    for key,values in input_dict.items():\n",
    "        for i in values:\n",
    "            if i not in city_list:\n",
    "                city_list.append(i)\n",
    "    for city in city_list:\n",
    "        state_list=[]\n",
    "        for key,values in input_dict.items():\n",
    "            if(city in values):\n",
    "                state_list.append(key)\n",
    "        output_dict[city]=state_list\n",
    "    return output_dict\n",
    "   \n",
    "result=city_with_states({'New Hampshire': ['Concord', 'Hanover'],'Massachusetts': ['Boston', 'Concord', 'Springfield'],'Illinois': ['Chicago', 'Springfield', 'Peoria'] })\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'str' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-69-7b9da4ccee94>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     39\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mstr1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     40\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 41\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnumbers_to_chars\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m9999335533\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     42\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-69-7b9da4ccee94>\u001b[0m in \u001b[0;36mnumbers_to_chars\u001b[1;34m(number)\u001b[0m\n\u001b[0;32m     15\u001b[0m \u001b[0mnum_dict\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m{\u001b[0m\u001b[1;34m'2'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'a'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'b'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'c'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'3'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'd'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'e'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'f'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'4'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'g'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'h'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'i'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'5'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'j'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'k'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'l'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'6'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'm'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'n'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'o'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'7'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'p'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'q'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'r'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m's'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'8'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m't'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'u'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'v'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'9'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'w'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'x'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'y'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'z'\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m}\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0mnumbers_to_chars\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnumber\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 17\u001b[1;33m     \u001b[0mmessage\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnumber\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     18\u001b[0m     \u001b[0mcount_list\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     19\u001b[0m     \u001b[0mval_list\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'str' object is not callable"
     ]
    }
   ],
   "source": [
    "#1.In the pre-smartphone era,each number key is assigned a subset of the alphabet {a,b,â€¦,z}.\n",
    "\n",
    "#- 2 is assigned {a,b,c}, \n",
    "#- 3 is assigned {d,e,f} \n",
    "#- 4 is assigned {g,h,i} \n",
    "#- 5 is assigned {j,k,l}\n",
    "#- 6 is assigned {m,n,o} \n",
    "#- 7 is assigned {p,q,r,s}\n",
    "#- 8 is assigned {t,u,v} \n",
    "#- 9 is assigned {w,x,y,z}\n",
    "\n",
    "#Write a function numbers_to_chars() to find the characters generated using key 9999335533. Output should be \"zeke\"\n",
    "\n",
    "#Function Name : numbers_to_chars() Input : Integer number sequence Output : Str\n",
    "num_dict={'2':['a','b','c'], '3':['d','e','f'], '4':['g','h','i'], '5':['j','k','l'], '6':['m','n','o'], '7':['p','q','r','s'], '8':['t','u','v'], '9':['w','x','y','z']}\n",
    "def numbers_to_chars(number):\n",
    "    message=str(number)\n",
    "    count_list=[]\n",
    "    val_list=[]\n",
    "    count=0\n",
    "    index=0\n",
    "    character=message[index]\n",
    "    for index in range(0,len(message)):\n",
    "        if message[index]==character:\n",
    "            count+=1\n",
    "        else:\n",
    "            val_list.append(character)\n",
    "            count_list.append(count)\n",
    "            character=message[index]\n",
    "            count=1\n",
    "        if index==len(message)-1:\n",
    "            val_list.append(character)\n",
    "            count_list.append(count)\n",
    "    str1=\"\"\n",
    "    for index in range(0,len(val_list)):\n",
    "        count_val=count_list[index]\n",
    "        value=num_dict[val_list[index]]\n",
    "        str1+=value[count_val-1]\n",
    "    return str1\n",
    "   \n",
    "print(numbers_to_chars(9999335533))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}